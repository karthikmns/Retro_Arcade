{"version":3,"sources":["SnakeGame.js","WhackAMole.js","MemoryMatch.js","App.js","index.js"],"names":["INITIAL_SNAKE","x","y","INITIAL_DIRECTION","INITIAL_FOOD","SnakeGame","snake","setSnake","useState","direction","setDirection","food","setFood","gameOver","setGameOver","score","setScore","moveSnake","useCallback","newSnake","head","some","segment","unshift","prevScore","generateFood","pop","currentSnake","newFood","Math","floor","random","handleKeyPress","e","key","prev","useEffect","intervalId","setInterval","window","addEventListener","clearInterval","removeEventListener","React","createElement","className","map","index","style","left","top","onClick","resetGame","WhackAMole","timeLeft","setTimeLeft","GAME_DURATION","activeMole","setActiveMole","gameActive","setGameActive","timer","moleTimer","startGame","prevTime","clearTimeout","showMole","setTimeout","Array","_","whackMole","CARD_SYMBOLS","MemoryMatch","cards","setCards","flipped","setFlipped","solved","setSolved","moves","setMoves","initializeGame","shuffledCards","sort","symbol","id","isGameOver","length","_ref","includes","newFlipped","firstId","secondId","handleCardClick","GameCard","title","description","GameRequestForm","_ref2","onSubmit","gameName","setGameName","gameDescription","setGameDescription","preventDefault","name","type","placeholder","value","onChange","target","required","App","currentGame","setCurrentGame","gameRequests","setGameRequests","games","component","handleBackToHome","game","handleGameClick","request","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEA,MAEMA,EAAgB,CAAC,CAAEC,EAAG,GAAIC,EAAG,KAC7BC,EAAoB,CAAEF,EAAG,EAAGC,EAAG,GAC/BE,EAAe,CAAEH,EAAG,GAAIC,EAAG,IA8HlBG,MA5HGA,KAChB,MAAOC,EAAOC,GAAYC,mBAASR,IAC5BS,EAAWC,GAAgBF,mBAASL,IACpCQ,EAAMC,GAAWJ,mBAASJ,IAC1BS,EAAUC,GAAeN,oBAAS,IAClCO,EAAOC,GAAYR,mBAAS,GAU7BS,EAAYC,sBAAY,KAC5B,GAAIL,EAAU,OAEd,MAAMM,EAAW,IAAIb,GACfc,EAAO,IAAKD,EAAS,IAC3BC,EAAKnB,GAAKQ,EAAUR,EACpBmB,EAAKlB,GAAKO,EAAUP,EAGhBkB,EAAKnB,EAAI,GAAKmB,EAAKnB,GA9BT,IA8B2BmB,EAAKlB,EAAI,GAAKkB,EAAKlB,GA9B9C,IAoCViB,EAASE,KAAKC,GAAWA,EAAQrB,IAAMmB,EAAKnB,GAAKqB,EAAQpB,IAAMkB,EAAKlB,GALtEY,GAAY,IAUdK,EAASI,QAAQH,GAGbA,EAAKnB,IAAMU,EAAKV,GAAKmB,EAAKlB,IAAMS,EAAKT,GACvCc,EAASQ,GAAaA,EAAY,GAClCC,EAAaN,IAEbA,EAASO,MAGXnB,EAASY,KACR,CAACb,EAAOG,EAAWE,EAAME,IAEtBY,EAAgBE,IACpB,IAAIC,EACJ,GACEA,EAAU,CACR3B,EAAG4B,KAAKC,MA1DE,GA0DID,KAAKE,UACnB7B,EAAG2B,KAAKC,MA3DE,GA2DID,KAAKE,iBAEdJ,EAAaN,KAAKC,GAAWA,EAAQrB,IAAM2B,EAAQ3B,GAAKqB,EAAQpB,IAAM0B,EAAQ1B,IACvFU,EAAQgB,IAGJI,EAAiBd,sBAAae,IAClC,IAAIpB,EAEJ,OAAQoB,EAAEC,KACR,IAAK,UACHxB,EAAayB,GAAmB,IAAXA,EAAKjC,EAAU,CAAED,EAAG,EAAGC,GAAI,GAAMiC,GACtD,MACF,IAAK,YACHzB,EAAayB,IAAoB,IAAZA,EAAKjC,EAAW,CAAED,EAAG,EAAGC,EAAG,GAAMiC,GACtD,MACF,IAAK,YACHzB,EAAayB,GAAmB,IAAXA,EAAKlC,EAAU,CAAEA,GAAI,EAAGC,EAAG,GAAMiC,GACtD,MACF,IAAK,aACHzB,EAAayB,IAAoB,IAAZA,EAAKlC,EAAW,CAAEA,EAAG,EAAGC,EAAG,GAAMiC,KAKzD,CAACtB,IAYJ,OAVAuB,oBAAU,KACR,MAAMC,EAAaC,YAAYrB,EAAW,KAG1C,OAFAsB,OAAOC,iBAAiB,UAAWR,GAE5B,KACLS,cAAcJ,GACdE,OAAOG,oBAAoB,UAAWV,KAEvC,CAACf,EAAWe,IAGbW,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,OAAKC,UAAU,cACZvC,EAAMwC,IAAI,CAACxB,EAASyB,IACnBJ,IAAAC,cAAA,OACEV,IAAKa,EACLF,UAAU,gBACVG,MAAO,CACLC,KAvGI,GAuGE3B,EAAQrB,EACdiD,IAxGI,GAwGC5B,EAAQpB,MAInByC,IAAAC,cAAA,OACEC,UAAU,OACVG,MAAO,CACLC,KA/GM,GA+GAtC,EAAKV,EACXiD,IAhHM,GAgHDvC,EAAKT,MAIhByC,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,SAAG,UAAQ7B,GACVF,GACC8B,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,cACHD,IAAAC,cAAA,UAAQO,QA7GAC,KAChB7C,EAASP,GACTU,EAAaP,GACbS,EAAQR,GACRU,GAAY,GACZE,EAAS,IAwG2B6B,UAAU,kBAAiB,oBCpCpDQ,MAnFIA,KACjB,MAAOtC,EAAOC,GAAYR,mBAAS,IAC5B8C,EAAUC,GAAe/C,mBAASgD,KAClCC,EAAYC,GAAiBlD,mBAAS,OACtCmD,EAAYC,GAAiBpD,oBAAS,GAE7C4B,oBAAU,KACR,IAAIyB,EACAC,EAmCJ,OAJIH,GA7BcI,MAChB/C,EAAS,GACTuC,EAAYC,IACZI,GAAc,GACdF,EAAc,MAEdG,EAAQvB,YAAY,KAClBiB,EAAaS,GACPA,GAAY,GACdvB,cAAcoB,GACdI,aAAaH,GACbF,GAAc,GACP,GAEFI,EAAW,IAEnB,KAEH,MAAME,EAAWA,KACfR,EAAc7B,KAAKC,MAAsB,EAAhBD,KAAKE,WAC9B+B,EAAYK,WAAW,KACrBT,EAAc,MACVC,GAAYO,KAlCD,MAsCnBA,KAIAH,GAGK,KACLtB,cAAcoB,GACdI,aAAaH,KAEd,CAACH,IASJ,OACEhB,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,SAAG,UAAQ7B,GACX4B,IAAAC,cAAA,SAAG,cAAYU,EAAS,MAE1BX,IAAAC,cAAA,OAAKC,UAAU,aACZ,IAAIuB,MAAM,IAAItB,IAAI,CAACuB,EAAGtB,IACrBJ,IAAAC,cAAA,OACEV,IAAKa,EACLF,UAAW,cAAaY,IAAeV,EAAQ,SAAW,IAC1DI,QAASA,IAnBAJ,KACbA,IAAUU,IACZzC,EAAUQ,GAAcA,EAAY,GACpCkC,EAAc,QAgBOY,CAAUvB,IAExBU,IAAeV,GAASJ,IAAAC,cAAA,OAAKC,UAAU,aAI5Cc,GACAhB,IAAAC,cAAA,UAAQO,QAASA,IAAMS,GAAc,GAAOf,UAAU,gBACtCW,KAAbF,EAAoC,aAAe,gBC/E9D,MAAMiB,EAAe,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAiEjDC,MA/DKA,KAClB,MAAOC,EAAOC,GAAYlE,mBAAS,KAC5BmE,EAASC,GAAcpE,mBAAS,KAChCqE,EAAQC,GAAatE,mBAAS,KAC9BuE,EAAOC,GAAYxE,mBAAS,GAEnC4B,oBAAU,KACR6C,KACC,IAEH,MAAMA,EAAiBA,KACrB,MAAMC,EAAgB,IAAIX,KAAiBA,GACxCY,KAAK,IAAMtD,KAAKE,SAAW,IAC3Be,IAAI,CAACsC,EAAQrC,KAAK,CAAQsC,GAAItC,EAAOqC,YACxCV,EAASQ,GACTN,EAAW,IACXE,EAAU,IACVE,EAAS,IAmBLM,EAAaT,EAAOU,SAAWd,EAAMc,OAE3C,OACE5C,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,SAAG,UAAQmC,GACVO,GAAc3C,IAAAC,cAAA,SAAG,+BAA6BmC,EAAM,YAEvDpC,IAAAC,cAAA,OAAKC,UAAU,aACZ4B,EAAM3B,IAAI0C,IAAA,IAAC,GAAEH,EAAE,OAAED,GAAQI,EAAA,OACxB7C,IAAAC,cAAA,OACEV,IAAKmD,EACLxC,UAAW,SAAQ8B,EAAQc,SAASJ,IAAOR,EAAOY,SAASJ,GAAM,UAAY,IAC7ElC,QAASA,IA9BMkC,KACvB,GAAuB,IAAnBV,EAAQY,QAAgBZ,EAAQc,SAASJ,IAAOR,EAAOY,SAASJ,GAAK,OAEzE,MAAMK,EAAa,IAAIf,EAASU,GAIhC,GAHAT,EAAWc,GACXV,EAASD,EAAQ,GAES,IAAtBW,EAAWH,OAAc,CAC3B,MAAOI,EAASC,GAAYF,EACxBjB,EAAMkB,GAASP,SAAWX,EAAMmB,GAAUR,QAC5CN,EAAU,IAAID,EAAQc,EAASC,IAEjCzB,WAAW,IAAMS,EAAW,IAAK,OAkBZiB,CAAgBR,IAE9BV,EAAQc,SAASJ,IAAOR,EAAOY,SAASJ,GAAMD,EAAS,QAI9DzC,IAAAC,cAAA,UAAQO,QAAS8B,EAAgBpC,UAAU,kBACxCyC,EAAa,aAAe,kBCvDrC,MAAMQ,EAAWN,IAAA,IAAC,MAAEO,EAAK,YAAEC,EAAW,QAAE7C,GAASqC,EAAA,OAC/C7C,IAAAC,cAAA,OAAKC,UAAU,YAAYM,QAASA,GAClCR,IAAAC,cAAA,UAAKmD,GACLpD,IAAAC,cAAA,SAAIoD,KAIFC,EAAkBC,IAAmB,IAAlB,SAAEC,GAAUD,EACnC,MAAOE,EAAUC,GAAe7F,mBAAS,KAClC8F,EAAiBC,GAAsB/F,mBAAS,IASvD,OACEmC,IAAAC,cAAA,QAAMC,UAAU,oBAAoBsD,SARhBlE,IACpBA,EAAEuE,iBACFL,EAAS,CAAEM,KAAML,EAAUJ,YAAaM,IACxCD,EAAY,IACZE,EAAmB,MAKjB5D,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,SACE8D,KAAK,OACLC,YAAY,YACZC,MAAOR,EACPS,SAAW5E,GAAMoE,EAAYpE,EAAE6E,OAAOF,OACtCG,UAAQ,IAEVpE,IAAAC,cAAA,YACE+D,YAAY,mBACZC,MAAON,EACPO,SAAW5E,GAAMsE,EAAmBtE,EAAE6E,OAAOF,OAC7CG,UAAQ,IAEVpE,IAAAC,cAAA,UAAQ8D,KAAK,UAAS,oBAoFbM,MA/Ef,WACE,MAAOC,EAAaC,GAAkB1G,mBAAS,OACxC2G,EAAcC,GAAmB5G,mBAAS,IAE3C6G,EAAQ,CACZ,CACEtB,MAAO,mBACPC,YAAa,8CACbsB,UAAWjH,GAEb,CACE0F,MAAO,eACPC,YAAa,kCACbsB,UAAWjE,GAEb,CACE0C,MAAO,eACPC,YAAa,uCACbsB,UAAW9C,IAiBf,OACE7B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,SAAG,sDAEJqE,EACCtE,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,UAAQO,QAjBSoE,KACvBL,EAAe,OAgB0BrE,UAAU,eAAc,iBAC3DF,IAAAC,cAACqE,EAAYK,UAAS,OAGxB3E,IAAAC,cAAA,YACED,IAAAC,cAAA,OAAKC,UAAU,aACZwE,EAAMvE,IAAI,CAAC0E,EAAMzE,IAChBJ,IAAAC,cAACkD,EAAQ,CACP5D,IAAKa,EACLgD,MAAOyB,EAAKzB,MACZC,YAAawB,EAAKxB,YAClB7C,QAASA,IAhCEqE,KACvBN,EAAeM,IA+BYC,CAAgBD,OAIrC7E,IAAAC,cAACqD,EAAe,CAACE,SA5BEuB,IACzBN,EAAgB,IAAID,EAAcO,IAClCC,MAAM,iDAAiDD,EAAQjB,kCA2BxDU,EAAa5B,OAAS,GACrB5C,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UACGuE,EAAarE,IAAI,CAAC4E,EAAS3E,IAC1BJ,IAAAC,cAAA,MAAIV,IAAKa,GAAQ2E,EAAQjB,KAAK,KAAGiB,EAAQ1B,iBAOrDrD,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,SAAG,yFACHD,IAAAC,cAAA,KAAGC,UAAU,SAAQ,2CClH7B+E,IAASC,OACPlF,IAAAC,cAACD,IAAMmF,WAAU,KACfnF,IAAAC,cAACoE,EAAG,OAENe,SAASC,eAAe,W","file":"static/js/main.51c5ff06.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{ x: 10, y: 10 }];\nconst INITIAL_DIRECTION = { x: 1, y: 0 };\nconst INITIAL_FOOD = { x: 15, y: 15 };\n\nconst SnakeGame = () => {\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n  };\n\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n    head.x += direction.x;\n    head.y += direction.y;\n\n    // Check collision with walls\n    if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n      setGameOver(true);\n      return;\n    }\n\n    // Check collision with self\n    if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n\n    // Check if snake ate food\n    if (head.x === food.x && head.y === food.y) {\n      setScore(prevScore => prevScore + 1);\n      generateFood(newSnake);\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  }, [snake, direction, food, gameOver]);\n\n  const generateFood = (currentSnake) => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE)\n      };\n    } while (currentSnake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    setFood(newFood);\n  };\n\n  const handleKeyPress = useCallback((e) => {\n    if (gameOver) return;\n    \n    switch (e.key) {\n      case 'ArrowUp':\n        setDirection(prev => prev.y !== 1 ? { x: 0, y: -1 } : prev);\n        break;\n      case 'ArrowDown':\n        setDirection(prev => prev.y !== -1 ? { x: 0, y: 1 } : prev);\n        break;\n      case 'ArrowLeft':\n        setDirection(prev => prev.x !== 1 ? { x: -1, y: 0 } : prev);\n        break;\n      case 'ArrowRight':\n        setDirection(prev => prev.x !== -1 ? { x: 1, y: 0 } : prev);\n        break;\n      default:\n        break;\n    }\n  }, [gameOver]);\n\n  useEffect(() => {\n    const intervalId = setInterval(moveSnake, 100);\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      clearInterval(intervalId);\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [moveSnake, handleKeyPress]);\n\n  return (\n    <div className=\"snake-game\">\n      <div className=\"game-board\">\n        {snake.map((segment, index) => (\n          <div\n            key={index}\n            className=\"snake-segment\"\n            style={{\n              left: segment.x * CELL_SIZE,\n              top: segment.y * CELL_SIZE,\n            }}\n          />\n        ))}\n        <div\n          className=\"food\"\n          style={{\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n          }}\n        />\n      </div>\n      <div className=\"game-info\">\n        <p>Score: {score}</p>\n        {gameOver && (\n          <div>\n            <p>Game Over!</p>\n            <button onClick={resetGame} className=\"restart-button\">Restart Game</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame;","import React, { useState, useEffect } from 'react';\n\nconst GAME_DURATION = 30000; // 30 seconds\nconst MOLE_APPEAR_TIME = 1000; // 1 second\n\nconst WhackAMole = () => {\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(GAME_DURATION / 1000);\n  const [activeMole, setActiveMole] = useState(null);\n  const [gameActive, setGameActive] = useState(false);\n\n  useEffect(() => {\n    let timer;\n    let moleTimer;\n\n    const startGame = () => {\n      setScore(0);\n      setTimeLeft(GAME_DURATION / 1000);\n      setGameActive(true);\n      setActiveMole(null);\n\n      timer = setInterval(() => {\n        setTimeLeft((prevTime) => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            clearTimeout(moleTimer);\n            setGameActive(false);\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n\n      const showMole = () => {\n        setActiveMole(Math.floor(Math.random() * 9));\n        moleTimer = setTimeout(() => {\n          setActiveMole(null);\n          if (gameActive) showMole();\n        }, MOLE_APPEAR_TIME);\n      };\n\n      showMole();\n    };\n\n    if (gameActive) {\n      startGame();\n    }\n\n    return () => {\n      clearInterval(timer);\n      clearTimeout(moleTimer);\n    };\n  }, [gameActive]);\n\n  const whackMole = (index) => {\n    if (index === activeMole) {\n      setScore((prevScore) => prevScore + 1);\n      setActiveMole(null);\n    }\n  };\n\n  return (\n    <div className=\"whack-a-mole\">\n      <h2>Whack-a-Mole</h2>\n      <div className=\"game-info\">\n        <p>Score: {score}</p>\n        <p>Time Left: {timeLeft}s</p>\n      </div>\n      <div className=\"game-grid\">\n        {[...Array(9)].map((_, index) => (\n          <div\n            key={index}\n            className={`mole-hole ${activeMole === index ? 'active' : ''}`}\n            onClick={() => whackMole(index)}\n          >\n            {activeMole === index && <div className=\"mole\" />}\n          </div>\n        ))}\n      </div>\n      {!gameActive && (\n        <button onClick={() => setGameActive(true)} className=\"start-button\">\n          {timeLeft === GAME_DURATION / 1000 ? 'Start Game' : 'Play Again'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default WhackAMole;","import React, { useState, useEffect } from 'react';\n\nconst CARD_SYMBOLS = ['🍎', '🍌', '🍒', '🍓', '🍊', '🍋', '🍉', '🍇'];\n\nconst MemoryMatch = () => {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [solved, setSolved] = useState([]);\n  const [moves, setMoves] = useState(0);\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  const initializeGame = () => {\n    const shuffledCards = [...CARD_SYMBOLS, ...CARD_SYMBOLS]\n      .sort(() => Math.random() - 0.5)\n      .map((symbol, index) => ({ id: index, symbol }));\n    setCards(shuffledCards);\n    setFlipped([]);\n    setSolved([]);\n    setMoves(0);\n  };\n\n  const handleCardClick = (id) => {\n    if (flipped.length === 2 || flipped.includes(id) || solved.includes(id)) return;\n    \n    const newFlipped = [...flipped, id];\n    setFlipped(newFlipped);\n    setMoves(moves + 1);\n\n    if (newFlipped.length === 2) {\n      const [firstId, secondId] = newFlipped;\n      if (cards[firstId].symbol === cards[secondId].symbol) {\n        setSolved([...solved, firstId, secondId]);\n      }\n      setTimeout(() => setFlipped([]), 1000);\n    }\n  };\n\n  const isGameOver = solved.length === cards.length;\n\n  return (\n    <div className=\"memory-match\">\n      <h2>Memory Match</h2>\n      <div className=\"game-info\">\n        <p>Moves: {moves}</p>\n        {isGameOver && <p>Congratulations! You won in {moves} moves!</p>}\n      </div>\n      <div className=\"card-grid\">\n        {cards.map(({ id, symbol }) => (\n          <div\n            key={id}\n            className={`card ${flipped.includes(id) || solved.includes(id) ? 'flipped' : ''}`}\n            onClick={() => handleCardClick(id)}\n          >\n            {flipped.includes(id) || solved.includes(id) ? symbol : '?'}\n          </div>\n        ))}\n      </div>\n      <button onClick={initializeGame} className=\"restart-button\">\n        {isGameOver ? 'Play Again' : 'Restart Game'}\n      </button>\n    </div>\n  );\n};\n\nexport default MemoryMatch;","import React, { useState } from 'react';\nimport './App.css';\nimport SnakeGame from './SnakeGame';\nimport WhackAMole from './WhackAMole';\nimport MemoryMatch from './MemoryMatch';\n\nconst GameCard = ({ title, description, onClick }) => (\n  <div className=\"game-card\" onClick={onClick}>\n    <h2>{title}</h2>\n    <p>{description}</p>\n  </div>\n);\n\nconst GameRequestForm = ({ onSubmit }) => {\n  const [gameName, setGameName] = useState('');\n  const [gameDescription, setGameDescription] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name: gameName, description: gameDescription });\n    setGameName('');\n    setGameDescription('');\n  };\n\n  return (\n    <form className=\"game-request-form\" onSubmit={handleSubmit}>\n      <h3>Request a New Game</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Game Name\"\n        value={gameName}\n        onChange={(e) => setGameName(e.target.value)}\n        required\n      />\n      <textarea\n        placeholder=\"Game Description\"\n        value={gameDescription}\n        onChange={(e) => setGameDescription(e.target.value)}\n        required\n      />\n      <button type=\"submit\">Submit Request</button>\n    </form>\n  );\n};\n\nfunction App() {\n  const [currentGame, setCurrentGame] = useState(null);\n  const [gameRequests, setGameRequests] = useState([]);\n\n  const games = [\n    {\n      title: \"Slithery Snacker\",\n      description: \"Eat pixels, grow long, don't bite yourself!\",\n      component: SnakeGame\n    },\n    {\n      title: \"Whack-a-Mole\",\n      description: \"Bop those moles as they pop up!\",\n      component: WhackAMole\n    },\n    {\n      title: \"Memory Match\",\n      description: \"Find the pairs and train your brain!\",\n      component: MemoryMatch\n    }\n  ];\n\n  const handleGameClick = (game) => {\n    setCurrentGame(game);\n  };\n\n  const handleBackToHome = () => {\n    setCurrentGame(null);\n  };\n\n  const handleGameRequest = (request) => {\n    setGameRequests([...gameRequests, request]);\n    alert(`Thank you for your game request! We've added \"${request.name}\" to our list of ideas.`);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>90s Arcade Revival</h1>\n        <p>Experience the pixelated joy of yesterday, today!</p>\n      </header>\n      {currentGame ? (\n        <div className=\"game-container\">\n          <button onClick={handleBackToHome} className=\"back-button\">Back to Games</button>\n          <currentGame.component />\n        </div>\n      ) : (\n        <main>\n          <div className=\"game-grid\">\n            {games.map((game, index) => (\n              <GameCard \n                key={index}\n                title={game.title}\n                description={game.description}\n                onClick={() => handleGameClick(game)}\n              />\n            ))}\n          </div>\n          <GameRequestForm onSubmit={handleGameRequest} />\n          {gameRequests.length > 0 && (\n            <div className=\"game-requests\">\n              <h3>Requested Games</h3>\n              <ul>\n                {gameRequests.map((request, index) => (\n                  <li key={index}>{request.name}: {request.description}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </main>\n      )}\n      <footer className=\"App-footer\">\n        <p>© 2024 90s Arcade Revival | Made with 💖 and a lot of 🕹️</p>\n        <p className=\"blink\">Best viewed on a 640x480 CRT monitor</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}